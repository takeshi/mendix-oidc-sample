// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jwt.actions;

import java.io.InputStream;
import java.io.StringWriter;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemWriter;
import java.io.ByteArrayOutputStream;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import jwt.helpers.RSAKeyPairReader;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserException;

/**
 * Converts a binary public or private key (DER format) to PEM (base64 encoded). Returns a String containing the PEM encoded certificate (X509 for public key and PKCS1 for private key).
 */
public class ConvertDERtoPEM extends CustomJavaAction<java.lang.String>
{
	private IMendixObject __derKey;
	private system.proxies.FileDocument derKey;

	public ConvertDERtoPEM(IContext context, IMendixObject derKey)
	{
		super(context);
		this.__derKey = derKey;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.derKey = this.__derKey == null ? null : system.proxies.FileDocument.initialize(getContext(), __derKey);

		// BEGIN USER CODE
		derKey.getClass();
		RSAKeyPairReader rsaKeyPairReader = new RSAKeyPairReader();
		
		try(	InputStream inputStream = Core.getFileDocumentContent(this.context(), __derKey);
				ByteArrayOutputStream buffer = new ByteArrayOutputStream();
				StringWriter stringWriter = new StringWriter();
				PemWriter pemWriter = new PemWriter(stringWriter);) {
			
			byte[] encodedKey = rsaKeyPairReader.inputStreamToByteArray(inputStream, buffer);
			
			
			if (__derKey.getMetaObject().getName().equals("JWT.JWTRSAPublicKey")) {
				pemWriter.writeObject(new PemObject("PUBLIC KEY", encodedKey));
			}
			
			if (__derKey.getMetaObject().getName().equals("JWT.JWTRSAPrivateKey")) {
				pemWriter.writeObject(new PemObject("RSA PRIVATE KEY", encodedKey));
			}
			
			if (__derKey.getMetaObject().getName().equals("System.FileDocument")) {
				throw new UserException(UserException.ExceptionCategory.DataValidation, "Could not determine keyType for conversion to PEM. Please use the JWTRSAPulicKey or JWTRSAPrivate key entities.");
			}
			
			pemWriter.flush();
			
			return stringWriter.toString();
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ConvertDERtoPEM";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
