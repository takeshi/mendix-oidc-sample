// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package jwt.actions;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import org.bouncycastle.asn1.pkcs.RSAPrivateKey;
import org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;
import org.bouncycastle.crypto.util.PrivateKeyFactory;
import org.bouncycastle.crypto.util.PrivateKeyInfoFactory;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemReader;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import jwt.proxies.JWTRSAPrivateKey;
import jwt.proxies.JWTRSAPublicKey;
import system.proxies.FileDocument;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserException;

/**
 * Specify key type (public or private) and enter the String for the PEM file. The action returns a FileDocument. When key type is public, it returns a JWTRSAPublicKey object, if private it returns a JWTRSAPrivateKey. If key type is empty, an exception is thrown.
 */
public class ConvertPEMtoDER extends CustomJavaAction<IMendixObject>
{
	private java.lang.String pemKey;
	private jwt.proxies.ENU_KeyType keyType;
	private java.lang.String outputFileName;

	public ConvertPEMtoDER(IContext context, java.lang.String pemKey, java.lang.String keyType, java.lang.String outputFileName)
	{
		super(context);
		this.pemKey = pemKey;
		this.keyType = keyType == null ? null : jwt.proxies.ENU_KeyType.valueOf(keyType);
		this.outputFileName = outputFileName;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext context = getContext();
		
		
		if (pemKey == null || pemKey.equals("")) {
			throw new UserException(UserException.ExceptionCategory.DataValidation, "Please enter a PEM certificate string for conversion to DER.");
		}
		
		if (keyType == null) {
			throw new UserException(UserException.ExceptionCategory.DataValidation, "Please specify a key type when converting certificates.");
		}
		
		Reader reader = new StringReader(pemKey);
		PemReader pemReader = new PemReader(reader);
		PemObject pemObject = pemReader.readPemObject();
		
		InputStream inputStream = null;
		
		FileDocument derKey = null;
		
		try {
			switch(keyType) {
			case _Private:
				derKey = new JWTRSAPrivateKey(context);
				RSAPrivateCrtKeyParameters privateKeyParameter;
				if (pemObject.getType().endsWith("RSA PRIVATE KEY")) {
				    //PKCS#1 key
				    RSAPrivateKey rsa   = RSAPrivateKey.getInstance(pemObject.getContent());
				    privateKeyParameter = new RSAPrivateCrtKeyParameters(
				        rsa.getModulus(),
				        rsa.getPublicExponent(),
				        rsa.getPrivateExponent(),
				        rsa.getPrime1(),
				        rsa.getPrime2(),
				        rsa.getExponent1(),
				        rsa.getExponent2(),
				        rsa.getCoefficient()
				    );
				} else if (pemObject.getType().endsWith("PRIVATE KEY")) {
				    //PKCS#8 key
					ILogNode logger = Core.getLogger("JWT");
					logger.warn("PKCS#8 private key format detected. JWT standard RSASSA-PKCS1-v1_5 uses PKCS#1.");
				    privateKeyParameter = (RSAPrivateCrtKeyParameters) PrivateKeyFactory.createKey(
				        pemObject.getContent()
				    );
				} else {
				    throw new RuntimeException("Unsupported key type: " + pemObject.getType());
				}
				
				byte[] privateKeyBytes = new JcaPEMKeyConverter()
			    .getPrivateKey(
			        PrivateKeyInfoFactory.createPrivateKeyInfo(
			            privateKeyParameter
			        )
			    ).getEncoded();
				
				inputStream = new ByteArrayInputStream(privateKeyBytes);
				
				break;
			case _Public:
				byte[] pemBytes = pemObject.getContent();
				inputStream = new ByteArrayInputStream(pemBytes);
				
				derKey = new JWTRSAPublicKey(context);
				break;
				default:
					throw new UserException(UserException.ExceptionCategory.DataValidation, "Could not determine keyType for conversion to DER.");
			}
			
			if (outputFileName == null || outputFileName.equals("")) {
				Core.storeFileDocumentContent(context, derKey.getMendixObject(), "key.der", inputStream);
			}
			
			if (outputFileName != null && !outputFileName.equals("")) {
				Core.storeFileDocumentContent(context, derKey.getMendixObject(), outputFileName, inputStream);
			}
			
		} finally {
			if (pemReader != null) {
				pemReader.close();
			}
			
			if (inputStream != null) {
				inputStream.close();
			}
		}
		
		return derKey.getMendixObject();
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ConvertPEMtoDER";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
